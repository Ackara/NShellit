<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
const int n = 8;
#>
using System;

namespace Acklann.Poshley.Extensions
{
	public static partial class MapExtensions
	{	
		<# 
		WriteMethods(n, "TResult", "The result of the selected command.",
		error: "Func<string, TResult> onParsingError",
		parameter: "Func<T{0}, TResult> cb{0}",

		arg: "(typeof(T{0}), (o) => cb{0}((T{0})o))",
		methodCall: @"
return Map(parser, args, onParsingError, new ValueTuple<Type, Func<object, TResult>>[]
{{
	{0}
}});"
		);
		#>
		
		<#
		WriteMethods(n, "void", "",
		error: "Action<string> onParsingError",
		parameter: "Action<T{0}> cb{0}",
		arg: "(typeof(T{0}), (o) => cb{0}((T{0})o))",
		methodCall: @"
Map(parser, args, onParsingError, new ValueTuple<Type, Action<object>>[]
{{
	{0}
}});
"
		);
		#>
	}
}
<#+
void WriteMethods(int n, string returnType, string returnTypeDoc, string error, string parameter, string arg, string methodCall)
{
	PushIndent("\t\t");

	Func<string, string> comma = (x)=> (string.IsNullOrEmpty(x) ? string.Empty : ", ");
	Func<int, int[]> iterator = (amt) => 
	{
		var result = new int[amt];
		for (int i = 0; i < amt; i++) result[i] = i + 1;
		return result;
	};
	string delegateReturnType = (returnType == "void" ? string.Empty: returnType);
	error = (string.IsNullOrEmpty(error) ? string.Empty : $", {error}");

	for (int i = 1; i <= n; i++)
	{
		var generics = string.Join(", ", iterator(i).Select(x=> $"T{x}").Concat(new string[1] { delegateReturnType })).Trim(',', ' ');
		var genericsDoc = string.Join("\r\n", iterator(i).Select(x=> $"/// <typeparam name=\"T{x}\">The type of command to add to the collection.</typeparam>")).Trim();

		var param = string.Join(", ", iterator(i).Select(x=> string.Format(parameter, x)));
		var paramDoc = string.Join("\r\n", iterator(i).Select(x=> $"/// <param name=\"cb{x}\">The callback method to invoke when <typeparamref name=\"T{x}\"/> is selected.</param>")).Trim();

		var args = string.Join(",\r\n\t", iterator(i).Select(x=> string.Format(arg, x)));

		WriteLine("/// <summary>blah blah</summary>");
		WriteLine(genericsDoc);
		if (!string.IsNullOrEmpty(delegateReturnType)) WriteLine($"/// <typeparam name=\"{returnType}\">The type of object to return.</typeparam>");
		WriteLine("/// <param name=\"parser\">The parser.</param>");
		WriteLine("/// <param name=\"args\">The user argument array.</param>");
		WriteLine(paramDoc);
		if (!string.IsNullOrEmpty(error)) WriteLine($"/// <param name=\"onParsingError\">The method to invoke when the user passes invalid arguments.</param>");
		if (!string.IsNullOrEmpty(delegateReturnType)) WriteLine($"/// <returns>{returnTypeDoc}</returns>");

		Write($"public static {returnType} Map<{generics}>(this Parser parser, string[] args, {param}{error}".Trim(' ', ','));
		WriteLine(")");
		WriteLine("{");
		PushIndent("\t");

		WriteLine(string.Format(methodCall, args).Trim());
	
		PopIndent();
		WriteLine("}");
		WriteLine("");
	}
	PopIndent();
}
#>